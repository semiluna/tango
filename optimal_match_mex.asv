#include "mex.hpp"
#include "mexAdapter.hpp"

#include <vector>
#include <algorithm>
#include <deque>

using namespace std;
using matlab::mex::ArgumentList;

class MexFunction : public matlab::mex::Function {
public:
    void operator()(ArgumentList outputs, ArgumentList inputs) {
        checkArguments(outputs, inputs);
        
        
    }
    
    vector<int> compute_matching(int nodes, vector<vector<int>> dist) {
  int total = nodes * 2 + 2;
  vector <vector<int>> G(total);
  vector <vector<int>> capacity(total, vector<int>(total));
  vector <vector<int>> cost(total, vector<int>(total));
  vector <vector<int>> flow(total, vector<int>(total));

  for (int i = 0; i < nodes; i++) {
    for (int j = 0; j < nodes; j++) {
      int x = i + 1, y = nodes + j + 1;
      if (dist[ i ][ j ] != 0) {
        int c = dist[ i ][ j ];

        capacity[ x ][ y ] = 1;
        cost[ x ][ y ] = c;
        cost[ y ][ x ] = -c;

        G[ x ].push_back(y);
        G[ y ].push_back(x);

      }
    }
  }

  /// add source and sink

  for (int i = 1; i <= nodes; i++) {
    G[ 0 ].push_back( i );
    capacity[ 0 ][ i ] = 1;
    cost[ 0 ][ i ] = 0;
  }

  for (int i = nodes + 1; i <= 2 * nodes; i++) {
    G[ i ].push_back(2 * nodes + 1);
    capacity[ i ][2 * nodes + 1] = 1;
  }

  int maxflow = 0;
  while (int minflow = bellmanford(total, G, capacity, cost, flow))
    maxflow += minflow;

  //fout << maxflow << '\n';

  vector<int> pairs;

  pairs.push_back(0);
  for (int i = 1; i <= nodes; i++) {
    for (int j = 1; j <= nodes; j++) {
      if (flow[ i ][j + nodes] > 0) {
        pairs.push_back(j);
      }
    }

  }

  return pairs;

}
    
    void checkArguments(ArgumentList outputs, ArgumentList inputs) {
        shared_ptr<matlab::engine::MATLABEngine> matLabPtr = getEngine();
        
        ArrayFactory factory;
        
        if (inputs[0].getType() != ArrayType::INTEGER ||
            inputs[0].getNumberOfElements() != 1) {
            matlabPtr->feval(u"error", 0, vector<Array>({factory.createScalar("First input must be an integer")}));
        }
    }
}


